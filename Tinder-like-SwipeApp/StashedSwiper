diff --git a/Tinder-like-SwipeApp.xcodeproj/project.pbxproj b/Tinder-like-SwipeApp.xcodeproj/project.pbxproj
index 65c6038..98d36d2 100644
--- a/Tinder-like-SwipeApp.xcodeproj/project.pbxproj
+++ b/Tinder-like-SwipeApp.xcodeproj/project.pbxproj
@@ -10,7 +10,8 @@
 		843509A92BC67D33000A4F1F /* LikedViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 843509A82BC67D33000A4F1F /* LikedViewController.swift */; };
 		846286A32B6862FA0071C8DE /* APIResponse.swift in Sources */ = {isa = PBXBuildFile; fileRef = 846286A22B6862FA0071C8DE /* APIResponse.swift */; };
 		84DD54082BC95813002C4148 /* LikedCollectionViewCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84DD54072BC95813002C4148 /* LikedCollectionViewCell.swift */; };
-		84E414722BC3FD1700F7F384 /* TopNavigationStackView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84E414712BC3FD1700F7F384 /* TopNavigationStackView.swift */; };
+		84DD540A2BC9775E002C4148 /* CardViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84DD54092BC9775E002C4148 /* CardViewModel.swift */; };
+		84DD54302BC98968002C4148 /* CardView.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84DD542F2BC98968002C4148 /* CardView.swift */; };
 		84E414752BC407F700F7F384 /* MainTabBarController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84E414742BC407F700F7F384 /* MainTabBarController.swift */; };
 		84EBFA3A2B62F58B00A98AFD /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84EBFA392B62F58B00A98AFD /* AppDelegate.swift */; };
 		84EBFA3C2B62F58B00A98AFD /* SceneDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 84EBFA3B2B62F58B00A98AFD /* SceneDelegate.swift */; };
@@ -24,7 +25,8 @@
 		843509A82BC67D33000A4F1F /* LikedViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LikedViewController.swift; sourceTree = "<group>"; };
 		846286A22B6862FA0071C8DE /* APIResponse.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = APIResponse.swift; sourceTree = "<group>"; };
 		84DD54072BC95813002C4148 /* LikedCollectionViewCell.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = LikedCollectionViewCell.swift; sourceTree = "<group>"; };
-		84E414712BC3FD1700F7F384 /* TopNavigationStackView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = TopNavigationStackView.swift; sourceTree = "<group>"; };
+		84DD54092BC9775E002C4148 /* CardViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardViewModel.swift; sourceTree = "<group>"; };
+		84DD542F2BC98968002C4148 /* CardView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CardView.swift; sourceTree = "<group>"; };
 		84E414742BC407F700F7F384 /* MainTabBarController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MainTabBarController.swift; sourceTree = "<group>"; };
 		84EBFA362B62F58B00A98AFD /* Tinder-like-SwipeApp.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = "Tinder-like-SwipeApp.app"; sourceTree = BUILT_PRODUCTS_DIR; };
 		84EBFA392B62F58B00A98AFD /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
@@ -50,7 +52,6 @@
 		84E414732BC3FFD900F7F384 /* Views */ = {
 			isa = PBXGroup;
 			children = (
-				84E414712BC3FD1700F7F384 /* TopNavigationStackView.swift */,
 			);
 			path = Views;
 			sourceTree = "<group>";
@@ -78,14 +79,16 @@
 				84EBFA392B62F58B00A98AFD /* AppDelegate.swift */,
 				84EBFA3B2B62F58B00A98AFD /* SceneDelegate.swift */,
 				84EBFA3D2B62F58B00A98AFD /* ViewController.swift */,
+				84DD542F2BC98968002C4148 /* CardView.swift */,
+				84DD54092BC9775E002C4148 /* CardViewModel.swift */,
 				846286A22B6862FA0071C8DE /* APIResponse.swift */,
 				84E414742BC407F700F7F384 /* MainTabBarController.swift */,
 				843509A82BC67D33000A4F1F /* LikedViewController.swift */,
+				84DD54072BC95813002C4148 /* LikedCollectionViewCell.swift */,
 				84EBFA3F2B62F58B00A98AFD /* Main.storyboard */,
 				84EBFA422B62F58E00A98AFD /* Assets.xcassets */,
 				84EBFA442B62F58E00A98AFD /* LaunchScreen.storyboard */,
 				84EBFA472B62F58E00A98AFD /* Info.plist */,
-				84DD54072BC95813002C4148 /* LikedCollectionViewCell.swift */,
 			);
 			path = "Tinder-like-SwipeApp";
 			sourceTree = "<group>";
@@ -118,7 +121,7 @@
 			attributes = {
 				BuildIndependentTargetsInParallel = 1;
 				LastSwiftUpdateCheck = 1430;
-				LastUpgradeCheck = 1430;
+				LastUpgradeCheck = 1530;
 				TargetAttributes = {
 					84EBFA352B62F58B00A98AFD = {
 						CreatedOnToolsVersion = 14.3.1;
@@ -162,13 +165,14 @@
 			buildActionMask = 2147483647;
 			files = (
 				84DD54082BC95813002C4148 /* LikedCollectionViewCell.swift in Sources */,
+				84DD54302BC98968002C4148 /* CardView.swift in Sources */,
 				843509A92BC67D33000A4F1F /* LikedViewController.swift in Sources */,
 				84EBFA3E2B62F58B00A98AFD /* ViewController.swift in Sources */,
 				84EBFA3A2B62F58B00A98AFD /* AppDelegate.swift in Sources */,
+				84DD540A2BC9775E002C4148 /* CardViewModel.swift in Sources */,
 				84E414752BC407F700F7F384 /* MainTabBarController.swift in Sources */,
 				84EBFA3C2B62F58B00A98AFD /* SceneDelegate.swift in Sources */,
 				846286A32B6862FA0071C8DE /* APIResponse.swift in Sources */,
-				84E414722BC3FD1700F7F384 /* TopNavigationStackView.swift in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -230,6 +234,7 @@
 				DEBUG_INFORMATION_FORMAT = dwarf;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
 				ENABLE_TESTABILITY = YES;
+				ENABLE_USER_SCRIPT_SANDBOXING = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu11;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_NO_COMMON_BLOCKS = YES;
@@ -290,6 +295,7 @@
 				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
 				ENABLE_NS_ASSERTIONS = NO;
 				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_USER_SCRIPT_SANDBOXING = YES;
 				GCC_C_LANGUAGE_STANDARD = gnu11;
 				GCC_NO_COMMON_BLOCKS = YES;
 				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
diff --git a/Tinder-like-SwipeApp.xcodeproj/project.xcworkspace/xcuserdata/admin.xcuserdatad/UserInterfaceState.xcuserstate b/Tinder-like-SwipeApp.xcodeproj/project.xcworkspace/xcuserdata/admin.xcuserdatad/UserInterfaceState.xcuserstate
index f4e1cbb..05ba164 100644
Binary files a/Tinder-like-SwipeApp.xcodeproj/project.xcworkspace/xcuserdata/admin.xcuserdatad/UserInterfaceState.xcuserstate and b/Tinder-like-SwipeApp.xcodeproj/project.xcworkspace/xcuserdata/admin.xcuserdatad/UserInterfaceState.xcuserstate differ
diff --git a/Tinder-like-SwipeApp/CardView.swift b/Tinder-like-SwipeApp/CardView.swift
index abae695..5fb3999 100644
--- a/Tinder-like-SwipeApp/CardView.swift
+++ b/Tinder-like-SwipeApp/CardView.swift
@@ -9,12 +9,150 @@ import UIKit
 
 class CardView: UIView {
 
-    /*
-    // Only override draw() if you perform custom drawing.
-    // An empty implementation adversely affects performance during animation.
-    override func draw(_ rect: CGRect) {
-        // Drawing code
-    }
-    */
+    var cardView: UIView!
+    var imageView: UIImageView!
+    var thumbImageView: UIImageView!
+    
+    let vc = ViewController()
+    
+    let treshold: CGFloat = 75
+    var currentPhotoIndex = 0
 
+    
+    override init(frame: CGRect) {
+        super.init(frame: .zero)
+        
+        cardView = UIView(frame: CGRect(x: 0, y: 0, width: 380, height: 500))
+        cardView.layer.cornerRadius = 10
+        cardView.layer.shadowColor = UIColor.black.cgColor
+        cardView.layer.shadowOpacity = 0.3
+        cardView.layer.shadowOffset = CGSize(width: 0, height: 2)
+        cardView.layer.shadowRadius = 4
+        cardView.backgroundColor = .white
+        cardView.translatesAutoresizingMaskIntoConstraints = false
+//        view.addSubview(cardView)
+        
+        NSLayoutConstraint.activate([
+            cardView.centerXAnchor.constraint(equalTo: self.centerXAnchor),
+            cardView.centerYAnchor.constraint(equalTo: self.centerYAnchor),
+            cardView.widthAnchor.constraint(equalToConstant: 380),
+            cardView.heightAnchor.constraint(equalToConstant: 500)
+        ])
+        
+        imageView = UIImageView(frame: cardView.bounds)
+        imageView.contentMode = .scaleAspectFill
+        imageView.clipsToBounds = true
+        cardView.addSubview(imageView)
+//        loadNextSetOfPhotos()
+        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan))
+        cardView.addGestureRecognizer(panGesture)
+        thumbImageView = UIImageView()
+        cardView.addSubview(thumbImageView)
+        thumbImageView.frame = imageView.bounds
+        imageView.center = cardView.center
+        
+    }
+    
+    // MARK: - Swiping Gestures
+    
+    @objc fileprivate func handlePan(gesture: UIPanGestureRecognizer) {
+        
+        switch gesture.state {
+        case .began:
+            self.subviews.forEach({ subview in
+                subview.layer.removeAllAnimations()
+            })
+        case .changed:
+            handleChangedState(gesture)
+        case .ended:
+            handleEndedState(gesture)
+        default:
+            ()
+        }
+    }
+    
+    fileprivate func setupThumbImageViewAnimation(_ translation: CGPoint) {
+        
+        let xFromCenter = cardView.center.x - self.center.x
+        
+        cardView.center = CGPoint(x: self.center.x + translation.x, y: self.center.y + translation.y)
+        
+        if xFromCenter > 0 {
+            thumbImageView.image = UIImage(systemName: "hand.thumbsup.fill")
+            thumbImageView.tintColor = .green
+        } else {
+            thumbImageView.image = UIImage(systemName: "hand.thumbsdown.fill")
+            thumbImageView.tintColor = .red
+        }
+        
+        thumbImageView.alpha = abs(xFromCenter / self.center.x)
+    }
+    
+    fileprivate func handleChangedState(_ gesture: UIPanGestureRecognizer) {
+        
+        let translation = gesture.translation(in: nil)
+        
+        setupThumbImageViewAnimation(translation)
+        
+        // rotation + conversion degrees to radians
+        let degrees: CGFloat = translation.x / 20
+        let angle = degrees * CGFloat.pi / 180
+        
+        let rotationTransformation = CGAffineTransform(rotationAngle: angle)
+        cardView.transform = rotationTransformation.translatedBy(x: translation.x, y: translation.y)
+    }
+    
+    fileprivate func swipedLeft() {
+        // Dislike
+        UIView.animate(withDuration: 1, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.1) {
+                self.cardView.center = CGPoint(x: self.cardView.frame.origin.x - self.cardView.frame.width/2, y: self.center.y + self.treshold)
+                self.thumbImageView.image = UIImage(systemName: "hand.thumbsup.fill")
+                self.thumbImageView.tintColor = .green
+            }
+    }
+    
+    fileprivate func swipedRight() {
+        // Like
+        UIView.animate(withDuration: 1, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.1) {
+                self.cardView.center = CGPoint(x: self.frame.maxX + self.frame.width/2, y: self.imageView.center.y + self.treshold)
+//                self.images.append(self.imageView.image!)
+                self.currentPhotoIndex += 1
+        }
+    }
+    
+    fileprivate func handleEndedState(_ gesture: UIPanGestureRecognizer) {
+        
+        cardView.center = CGPoint(x: self.center.x + gesture.translation(in: nil).x, y: self.center.y + gesture.translation(in: nil).y)
+        
+        if cardView.center.x < treshold {
+            swipedLeft()
+            vc.resetCard()
+        } else if cardView.center.x > self.frame.width - treshold {
+            swipedRight()
+            vc.resetCard()
+        } else {
+            cardView.transform = .identity
+            cardView.center = self.center
+        }
+    }
+//    
+//    func resetCard() {
+//         UIView.animate(withDuration: 0.5) {
+//             self.currentPhotoIndex += 1
+//             self.cardView.transform = .identity
+//             self.cardView.center = self.center
+//             self.downloadImage()
+//         }
+//     }
+//    
+////    fileprivate func setupCards() {
+////        (0..<9).forEach { <#Int#> in
+////            <#code#>
+////        }
+////    }
+//    
+    required init?(coder: NSCoder) {
+        fatalError("init(coder:) has not been implemented")
+    }
+    
 }
diff --git a/Tinder-like-SwipeApp/CardViewModel.swift b/Tinder-like-SwipeApp/CardViewModel.swift
index 4fe5aeb..ad265d7 100644
--- a/Tinder-like-SwipeApp/CardViewModel.swift
+++ b/Tinder-like-SwipeApp/CardViewModel.swift
@@ -5,4 +5,5 @@
 //  Created by admin on 12.04.24.
 //
 
-import Foundation
+import UIKit
+
diff --git a/Tinder-like-SwipeApp/LikedCollectionViewCell.swift b/Tinder-like-SwipeApp/LikedCollectionViewCell.swift
index 450bdf6..d852887 100644
--- a/Tinder-like-SwipeApp/LikedCollectionViewCell.swift
+++ b/Tinder-like-SwipeApp/LikedCollectionViewCell.swift
@@ -9,37 +9,56 @@ import UIKit
 
 class LikedCollectionViewCell: UICollectionViewCell {
     
-    static let reuseId = "Cell"
+    static let identifier = "Cell"
     
     let imageView: UIImageView = {
         let imageView = UIImageView()
+        imageView.image = UIImage(systemName: "heart")
         imageView.contentMode = .scaleAspectFill
         imageView.clipsToBounds = true
+        imageView.backgroundColor = .purple
         return imageView
     }()
     
     // MARK: - Initializer
     
-    override init(frame: CGRect) {
-        super.init(frame: frame)
-        setupImageView()
-    }
+//    override class func awakeFromNib() {
+//        super.awakeFromNib()
+//    }
+//////
+//    override init(frame: CGRect) {
+//        super.init(frame: frame)
+//       addSubview(imageView)
+//    }
+//    
+//    required init?(coder aDecoder: NSCoder) {
+//        super.init(coder: aDecoder)
+////        setupImageView()
+//    }
+//    
+    // MARK: - Setup
     
-    required init?(coder aDecoder: NSCoder) {
-        super.init(coder: aDecoder)
-        setupImageView()
+    public func configure(with image: UIImage) {
+        imageView.image = image
+        self.setupUI()
     }
     
-    // MARK: - Setup
-    
-    private func setupImageView() {
-        contentView.addSubview(imageView)
+    private func setupUI() {
+        self.backgroundColor = .green
+        
+        self.addSubview(imageView)
         imageView.translatesAutoresizingMaskIntoConstraints = false
+        
         NSLayoutConstraint.activate([
-            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),
-            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
-            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
-            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)
+            imageView.topAnchor.constraint(equalTo: self.topAnchor),
+            imageView.leadingAnchor.constraint(equalTo: self.leadingAnchor),
+            imageView.trailingAnchor.constraint(equalTo: self.trailingAnchor),
+            imageView.bottomAnchor.constraint(equalTo: self.bottomAnchor)
         ])
     }
+
+    override func prepareForReuse() {
+        super.prepareForReuse()
+        imageView.image = nil
+    }
 }
diff --git a/Tinder-like-SwipeApp/LikedViewController.swift b/Tinder-like-SwipeApp/LikedViewController.swift
index f8a0b30..286c160 100644
--- a/Tinder-like-SwipeApp/LikedViewController.swift
+++ b/Tinder-like-SwipeApp/LikedViewController.swift
@@ -9,32 +9,72 @@ import UIKit
 
 class LikedViewController: UIViewController, UICollectionViewDataSource {
     
-    var collectionView: UICollectionView?
+    var images: [UIImage] = []
+    
+    private let collectionView: UICollectionView = {
+        let layout = UICollectionViewFlowLayout()
+        layout.scrollDirection = .vertical
+        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
+        collectionView.backgroundColor = .systemBackground
+        collectionView.register(LikedCollectionViewCell.self, forCellWithReuseIdentifier: LikedCollectionViewCell.identifier)
+        return collectionView
+    }()
     
     var likedImages: [UIImage] = []
     
     override func viewDidLoad() {
         super.viewDidLoad()
+        setupUI()
+        
+        for _ in 0...25 {
+            images.append(UIImage(named: "1")!)
+            images.append(UIImage(named: "2")!)
+            images.append(UIImage(named: "3")!)
+            images.append(UIImage(named: "4")!)
+        }
+        
+        collectionView.dataSource = self
+        collectionView.delegate = self
         
-        collectionView?.dataSource = self
-        collectionView?.delegate = self
+    }
+    
+    private func setupUI() {
+        
+        self.view.backgroundColor = .systemBackground
+        self.view.addSubview(collectionView)
+        collectionView.translatesAutoresizingMaskIntoConstraints = false
+  
+        NSLayoutConstraint.activate([
+            collectionView.topAnchor.constraint(equalTo: self.view.topAnchor),
+            collectionView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor),
+            collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor),
+            collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),
+        ])
     }
 }
 
 extension LikedViewController: UICollectionViewDelegate {
     
     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
-        return likedImages.count
+        return 40
     }
     
     func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
-        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! LikedCollectionViewCell
-        cell.imageView.image = likedImages[indexPath.item]
+        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: LikedCollectionViewCell.identifier, for: indexPath) as! LikedCollectionViewCell
+        cell.configure(with: self.images[indexPath.row])
+//        cell.imageView.image = UIImage(systemName: "heart")
+        cell.backgroundColor = .red
         return cell
     }
        
+//    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
+//            return CGSize(width: 100, height: 100)
+//    }
+//    
+}
+
+extension LikedViewController: UICollectionViewDelegateFlowLayout {
     func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
-            return CGSize(width: 100, height: 100)
+        return CGSize(width: 100, height: 100)
     }
-    
 }
diff --git a/Tinder-like-SwipeApp/ViewController.swift b/Tinder-like-SwipeApp/ViewController.swift
index a132f7c..aafd67e 100644
--- a/Tinder-like-SwipeApp/ViewController.swift
+++ b/Tinder-like-SwipeApp/ViewController.swift
@@ -8,16 +8,15 @@
 import UIKit
 
 class ViewController: UIViewController {
-
+    
     var currentPage = 1
     var currentPhotoIndex = 0
     let treshold: CGFloat = 75
     var isLoading = false
     
-    var cardView: UIView!
+    var cardView = UIView()
     var imageView: UIImageView!
     var thumbImageView: UIImageView!
-    var likeButton: UIBarButtonItem!
     
     var results: [APIResponse] = []
     var images: [UIImage] = []
@@ -53,10 +52,11 @@ class ViewController: UIViewController {
         thumbImageView = UIImageView()
         cardView.addSubview(thumbImageView)
         thumbImageView.frame = imageView.bounds
+        imageView.center = cardView.center
         
         loadNextSetOfPhotos()
     }
-
+    
     // MARK: - Swiping Gestures
     
     @objc fileprivate func handlePan(gesture: UIPanGestureRecognizer) {
@@ -95,9 +95,9 @@ class ViewController: UIViewController {
     fileprivate func handleChangedState(_ gesture: UIPanGestureRecognizer) {
         
         let translation = gesture.translation(in: nil)
-      
+        
         setupThumbImageViewAnimation(translation)
-
+        
         // rotation + conversion degrees to radians
         let degrees: CGFloat = translation.x / 20
         let angle = degrees * CGFloat.pi / 180
@@ -108,34 +108,19 @@ class ViewController: UIViewController {
     
     fileprivate func swipedLeft() {
         // Dislike
-        if currentPhotoIndex < 9 {
-            currentPhotoIndex += 1
-            imageView.image = images[currentPhotoIndex]
-            UIView.animate(withDuration: 1, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.1) {
+        UIView.animate(withDuration: 1, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.1) {
                 self.cardView.center = CGPoint(x: self.cardView.frame.origin.x - self.cardView.frame.width/2, y: self.view.center.y + self.treshold)
                 self.thumbImageView.image = UIImage(systemName: "hand.thumbsup.fill")
                 self.thumbImageView.tintColor = .green
-                self.resetImageViewPosition()
             }
-        } else {
-            loadNextSetOfPhotos()
-            currentPhotoIndex = 0
-        }
     }
     
     fileprivate func swipedRight() {
         // Like
-        if currentPhotoIndex < 9 {
-            imageView.image = images[currentPhotoIndex]
-            UIView.animate(withDuration: 1, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.1) {
+        UIView.animate(withDuration: 1, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0.1) {
                 self.cardView.center = CGPoint(x: self.view.frame.maxX + self.view.frame.width/2, y: self.imageView.center.y + self.treshold)
                 self.images.append(self.imageView.image!)
                 self.currentPhotoIndex += 1
-                self.resetImageViewPosition()
-            }
-        }  else {
-            loadNextSetOfPhotos()
-            currentPhotoIndex = 0
         }
     }
     
@@ -145,98 +130,81 @@ class ViewController: UIViewController {
         
         if cardView.center.x < treshold {
             swipedLeft()
+            resetCard()
         } else if cardView.center.x > view.frame.width - treshold {
             swipedRight()
+            resetCard()
         } else {
-            resetImageViewPosition()
+            cardView.transform = .identity
+            cardView.center = view.center
         }
     }
     
     func resetImageViewPosition() {
-         UIView.animate(withDuration: 0.3) {
-             self.imageView.center = self.view.center
-         }
-     }
-    
-    
-//    fileprivate func resetCard() {
-//        UIView.animate(withDuration: 0.5) {
-//            self.currentPhotoIndex += 1
-//            self.cardView.transform = .identity
-//            self.cardView.center = self.view.center
-////            self.downloadImage()
-//        }
-//    }
+        UIView.animate(withDuration: 0.3) {
+            self.imageView.center = self.view.center
+        }
+    }
     
     // MARK: - Network Service
     
     fileprivate func loadNextSetOfPhotos() {
         
-        guard !isLoading else { return }
-                isLoading = true
-        
         let unsplashAPIKey = "FrxT9u6XQRE_HVqjS9MhfYTH5LN0SsnhIp8VheooyRs"
         let urlString = "https://api.unsplash.com/photos/random?client_id=\(unsplashAPIKey)&count=10&page=\(currentPage)"
-
+        
         guard let url = URL(string: urlString) else { return }
                
-               let task = URLSession.shared.dataTask(with: url) { [weak self] (data, _, error) in
-                   guard let self = self else { return }
-                   defer { self.isLoading = false }
-                   
-                   if let error = error {
-                       print("Error fetching images: \(error)")
-                       return
-                   }
-                   
+               let task = URLSession.shared.dataTask(with: url) { [weak self] data, _, error in
                    guard let data = data else { return }
                    
-            do {
-                let jsonResult = try JSONDecoder().decode([APIResponse].self, from: data)
-                let imageUrls = jsonResult.compactMap { URL(string: $0.urls.regular) }
-                               self.images = imageUrls.compactMap { try? Data(contentsOf: $0) }.compactMap { UIImage(data: $0) }
-                               
-                               DispatchQueue.main.async {
-                                   self.imageView.image = self.images.first
-                               }
-//                DispatchQueue.main.async {
-//                    self.results = jsonResult
-//                    self.downloadImage()
-//                                   
-//                }
-            } catch {
-                print(error)
-            }
+                   do {
+                       let jsonResult = try JSONDecoder().decode([APIResponse].self, from: data)
+                       DispatchQueue.main.async {
+                           self?.results = jsonResult
+                           self?.downloadImage()
+                       }
+                   } catch {
+                       print(error)
+                   }
+               }
+               task.resume()
+           }
+    
+    func resetCard() {
+        UIView.animate(withDuration: 0.5) {
+            self.currentPhotoIndex += 1
+            self.cardView.transform = .identity
+            self.cardView.center = self.view.center
+            self.downloadImage()
         }
-        task.resume()
     }
-
     
-//    fileprivate func downloadImage() {
-//        
-//        if currentPhotoIndex > 9 {
-//            currentPage += 1
-//            currentPhotoIndex = 0
-//            fetchPhotos()
-//        } else {
-//            thumbImageView.alpha = 0
-//            let urlString = self.results[currentPhotoIndex].urls.regular
-//            guard let url = URL(string: urlString) else { return }
-//            let request = URLRequest(url: url, cachePolicy: .returnCacheDataElseLoad, timeoutInterval: 5)
-//            let dataTask = URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
-//                guard error == nil,
-//                      let data = data,
-//                      let response = response as? HTTPURLResponse,
-//                      response.statusCode == 200 else { return }
-//                guard let image = UIImage(data: data) else { return }
-//                DispatchQueue.main.async {
-//                    self?.imageView.image = image
-//                    self?.images = image.compactMap { try? Data(contentsOf: $0) }.compactMap { UIImage(data: $0) }
-//                }
-//            }
-//            dataTask.resume()
-//        }
-//    }
-
     
+    fileprivate func downloadImage() {
+        
+        if currentPhotoIndex > 9 {
+            currentPage += 1
+            currentPhotoIndex = 0
+            loadNextSetOfPhotos()
+        } else {
+            thumbImageView.alpha = 0
+            let urlString = self.results[currentPhotoIndex].urls.regular
+            guard let url = URL(string: urlString) else { return }
+            let request = URLRequest(url: url, cachePolicy: .returnCacheDataElseLoad, timeoutInterval: 5)
+            let dataTask = URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
+                guard error == nil,
+                      let data = data,
+                      let response = response as? HTTPURLResponse,
+                      response.statusCode == 200 else { return }
+                guard let image = UIImage(data: data) else { return }
+                DispatchQueue.main.async {
+                    self?.imageView.image = image
+                }
+            }
+            dataTask.resume()
+        }
+        
+        
+    }
 }
